plugins {
    id 'java'
}

group 'net.suqatri.redicloud'

jar {
    manifest {
        attributes 'Main-Class': 'net.suqatri.redicloud.node.NodeLauncherMain'
        attributes 'Commit-Hash': ''
    }
}

dependencies {
    implementation project(':api:api')
    implementation project(':api:api-default-impl')
    implementation project(':api:api-node')
    implementation project(':commons')
    implementation project(':commands:command-core')
    implementation project(':commands:command-console')
    implementation project(':commands:command-locales')
    implementation('org.apache.commons:commons-io:1.3.2')
    implementation('org.slf4j:slf4j-api:1.7.36')
    implementation('org.slf4j:slf4j-simple:1.7.36')
    implementation('org.jline:jline:3.21.0')
    implementation('org.fusesource.jansi:jansi:2.4.0')
}

task createProperties(dependsOn: processResources) {
    doLast {
        new File("$buildDir/resources/main/redicloud.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p['git-hash'] = getCommitHash()
            p['git-branche'] = getCurrentBrancheName()
            p.store w, null
        }
    }
}

def getCommitHash() {
    def git = new ProcessBuilder('git', 'rev-parse', getCurrentBrancheName()).directory(project.projectDir).start()
    def inputStream = git.getInputStream();
    def reader = new BufferedReader(new InputStreamReader(inputStream))
    def commitHash = reader.readLine()
    git.waitFor()
    return commitHash
}

def getCurrentBrancheName(){
    def git = new ProcessBuilder('git', 'symbolic-ref', '--short', '-q', 'HEAD').directory(project.projectDir).start()
    def inputStream = git.getInputStream();
    def reader = new BufferedReader(new InputStreamReader(inputStream))
    def branchName = reader.readLine()
    git.waitFor()
    return branchName
}

classes {
    dependsOn createProperties
}